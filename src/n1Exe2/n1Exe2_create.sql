-- MySQL Script generated by MySQL Workbench
-- Fri Oct 13 13:17:59 2023
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema pizza
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema pizza
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `pizza` DEFAULT CHARACTER SET utf8 ;
USE `pizza` ;

-- -----------------------------------------------------
-- Table `pizza`.`province`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `pizza`.`province` (
  `id` INT NOT NULL,
  `province_name` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `pizza`.`locality`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `pizza`.`locality` (
  `id` INT NOT NULL,
  `locality_name` VARCHAR(100) NOT NULL,
  `province_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  CONSTRAINT `FK_province_id`
    FOREIGN KEY (`province_id`)
    REFERENCES `pizza`.`province` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `FK_province_id_idx` ON `pizza`.`locality` (`province_id` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `pizza`.`client`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `pizza`.`client` (
  `id` INT NOT NULL,
  `client_name` VARCHAR(255) NOT NULL,
  `client_surname` VARCHAR(255) NULL,
  `client_adress` VARCHAR(45) NOT NULL,
  `client_post_code` VARCHAR(45) NOT NULL,
  `client_locality_id` INT NOT NULL,
  `client_province_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  CONSTRAINT `FK_client_province_id`
    FOREIGN KEY (`client_province_id`)
    REFERENCES `pizza`.`province` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_client_locality_id`
    FOREIGN KEY (`client_locality_id`)
    REFERENCES `pizza`.`locality` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `FK_client_province_id_idx` ON `pizza`.`client` (`client_province_id` ASC) VISIBLE;

CREATE INDEX `FK_client_locality_id_idx` ON `pizza`.`client` (`client_locality_id` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `pizza`.`store`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `pizza`.`store` (
  `id` INT NOT NULL,
  `store_address` VARCHAR(255) NOT NULL,
  `store_post_code` VARCHAR(45) NOT NULL,
  `store_locality_id` INT NOT NULL,
  `store_province_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  CONSTRAINT `FK_store_locality_id`
    FOREIGN KEY (`store_locality_id`)
    REFERENCES `pizza`.`locality` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_store_province_id`
    FOREIGN KEY (`store_province_id`)
    REFERENCES `pizza`.`province` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `FK_store_locality_id_idx` ON `pizza`.`store` (`store_locality_id` ASC) VISIBLE;

CREATE INDEX `FK_store_province_id_idx` ON `pizza`.`store` (`store_province_id` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `pizza`.`order`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `pizza`.`order` (
  `id` INT NOT NULL,
  `order_product_id` INT NOT NULL,
  `order_local_date_time` DATETIME NOT NULL,
  `order_type` VARCHAR(45) NOT NULL,
  `order_quantity` VARCHAR(45) NOT NULL,
  `order_vendor_id` INT NOT NULL,
  `order_client_id` INT NOT NULL,
  `order_invoice_number` INT NOT NULL,
  `store_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  CONSTRAINT `FK_order_client_id`
    FOREIGN KEY (`order_client_id`)
    REFERENCES `pizza`.`client` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_store_id`
    FOREIGN KEY (`store_id`)
    REFERENCES `pizza`.`store` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);

CREATE INDEX `FK_order_client_id_idx` ON `pizza`.`order` (`order_client_id` ASC) VISIBLE;

CREATE INDEX `FK_store_id_idx` ON `pizza`.`order` (`store_id` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `pizza`.`product_category`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `pizza`.`product_category` (
  `id` INT NOT NULL,
  `product_category_name` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`id`));


-- -----------------------------------------------------
-- Table `pizza`.`product`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `pizza`.`product` (
  `id` INT NOT NULL,
  `product_category_id` INT NOT NULL,
  `product_name` VARCHAR(45) NOT NULL,
  `product_description` VARCHAR(45) NOT NULL,
  `product_image` VARCHAR(255) NOT NULL,
  `product_price` INT NOT NULL,
  PRIMARY KEY (`id`),
  CONSTRAINT `product_category_id`
    FOREIGN KEY (`product_category_id`)
    REFERENCES `pizza`.`product_category` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);

CREATE INDEX `product_category_id_idx` ON `pizza`.`product` (`product_category_id` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `pizza`.`vendor`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `pizza`.`vendor` (
  `id` INT NOT NULL,
  `vendor_name` VARCHAR(100) NOT NULL,
  `vendor_surname` VARCHAR(100) NOT NULL,
  `vendor_nif` VARCHAR(45) NOT NULL,
  `vendor_phone_number` VARCHAR(45) NOT NULL,
  `vendor_type` VARCHAR(45) NOT NULL,
  `vendor_store_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  CONSTRAINT `FK_vendor_store_id`
    FOREIGN KEY (`vendor_store_id`)
    REFERENCES `pizza`.`store` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE UNIQUE INDEX `vendor_nif_UNIQUE` ON `pizza`.`vendor` (`vendor_nif` ASC) VISIBLE;

CREATE INDEX `FK_vendor_store_id_idx` ON `pizza`.`vendor` (`vendor_store_id` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `pizza`.`delivery_details`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `pizza`.`delivery_details` (
  `id` INT NOT NULL,
  `delivery_vendor_id` INT NOT NULL,
  `delivery_order_id` INT NOT NULL,
  `delivery_local_date_time` DATETIME NOT NULL,
  PRIMARY KEY (`id`),
  CONSTRAINT `FK_delivery_vendor_id`
    FOREIGN KEY (`delivery_vendor_id`)
    REFERENCES `pizza`.`vendor` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_delivery_order_id`
    FOREIGN KEY (`delivery_order_id`)
    REFERENCES `pizza`.`order` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);

CREATE INDEX `FK_vendor_id_idx` ON `pizza`.`delivery_details` (`delivery_vendor_id` ASC) VISIBLE;

CREATE INDEX `FK_delivery_order_id_idx` ON `pizza`.`delivery_details` (`delivery_order_id` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `pizza`.`product_has_order`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `pizza`.`product_has_order` (
  `product_id` INT NOT NULL,
  `order_id` INT NOT NULL,
  PRIMARY KEY (`product_id`, `order_id`),
  CONSTRAINT `fk_product_has_order_product1`
    FOREIGN KEY (`product_id`)
    REFERENCES `pizza`.`product` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_product_has_order_order1`
    FOREIGN KEY (`order_id`)
    REFERENCES `pizza`.`order` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);

CREATE INDEX `fk_product_has_order_order1_idx` ON `pizza`.`product_has_order` (`order_id` ASC) VISIBLE;

CREATE INDEX `fk_product_has_order_product1_idx` ON `pizza`.`product_has_order` (`product_id` ASC) VISIBLE;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
